message(STATUS "zenoh-c tests")

add_custom_target(tests)

find_package(Threads REQUIRED)

file(GLOB files "${CMAKE_CURRENT_SOURCE_DIR}/*.c")
foreach(file ${files})
    get_filename_component(target ${file} NAME_WE)
    
    # Exclude SHM tests if SHM feature is disabled
    if(NOT(ZENOHC_BUILD_WITH_SHARED_MEMORY AND (ZENOHC_BUILD_WITH_UNSTABLE_API)))
        if(${target} MATCHES "^.*_shm.*$")
            continue()
        endif()
    endif()
    
        # Exclude zenoh-ext tests if unstable api feature is disabled
    if(NOT(ZENOHC_BUILD_WITH_UNSTABLE_API))
	    if((${target} MATCHES "^.*_advanced_pub_sub.*$") OR (${target} MATCHES "^.*_pub_cache_query_sub.*$"))
            continue()
        endif()
    endif()

    if (BUILD_SHARED_LIBS AND (${target} MATCHES "^.*_build_static.*$"))
        continue()
    endif()
    if (NOT BUILD_SHARED_LIBS AND (${target} MATCHES "^.*_build_shared.*$"))
        continue()
    endif()

    # Check the filename prefix to determine the test type
    if (${file} MATCHES "^.*z_api_.*$")
        set(test_type "unit")
    elseif (${file} MATCHES "^.*z_int_.*$")
        set(test_type "integration")
    elseif (${file} MATCHES "^.*z_build_.*$")
        set(test_type "build")
    elseif (${file} MATCHES "^.*z_leak_.*$")
        set(test_type "leak")
    else()
        message(FATAL_ERROR "Test file ${file} does not match any known type (z_api_ or z_int_ or z_build)")
    endif()

    add_executable(${target} EXCLUDE_FROM_ALL ${file})
    add_dependencies(tests ${target})
    add_dependencies(${target} zenohc::lib)
    target_link_libraries(${target} PRIVATE zenohc::lib Threads::Threads)
    copy_dlls(${target})
    if(ZENOHC_BUILD_TESTS_WITH_CXX)
        set_source_files_properties(${file} PROPERTIES LANGUAGE CXX)
        set_property(TARGET ${target} PROPERTY LANGUAGE CXX)
        set_property(TARGET ${target} PROPERTY CXX_STANDARD 17)
        # add compiler flag "+x c++" to suppress the Clang warning "treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated "
        if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
            target_compile_options(${target} PRIVATE -x c++)
        endif()
        add_test(NAME "${test_type}_${target}" COMMAND ${target})
    else()
        set_source_files_properties(${file} PROPERTIES LANGUAGE C)
        set_property(TARGET ${target} PROPERTY LANGUAGE C)
        set_property(TARGET ${target} PROPERTY C_STANDARD 11)
        find_program(VALGRIND valgrind)
        if (NOT(test_type STREQUAL leak))
            add_test(NAME "${test_type}_${target}" COMMAND ${target})
        elseif(VALGRIND)
            add_test(NAME "${test_type}_${target}" COMMAND bash ${PROJECT_SOURCE_DIR}/tests/run_leak_check.sh ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${target})
        endif()
    endif()
endforeach()

