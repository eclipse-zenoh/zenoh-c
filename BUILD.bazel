# Copyright 2025 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@crate_opaque_types//:defs.bzl", all_crate_deps_opaque_types = "all_crate_deps")
load("@crate_zenoh//:defs.bzl", all_crate_deps_crate_zenoh = "all_crate_deps")
load("@rules_rust//cargo:defs.bzl", "cargo_bootstrap_repository", "cargo_build_script")
load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_library")
load("@rules_cc//cc:defs.bzl", "cc_test")
load("@rules_foreign_cc//foreign_cc:defs.bzl", "cmake")

package(default_visibility = ["//visibility:public"])

# Run a build in panic mode and capture stderr to 'build_resources_opaque_types.txt'

rust_library(
    name = "opaque_types",
    srcs = ["build-resources/opaque-types/src/lib.rs"],
    crate_features = [
        "panic",
        "zenoh-ext/unstable",
        "zenoh/auth_pubkey",
        "zenoh/auth_usrpwd",
        "zenoh/shared-memory",
        "zenoh/transport_compression",
        "zenoh/transport_multilink",
        "zenoh/transport_quic",
        "zenoh/transport_serial",
        "zenoh/transport_tcp",
        "zenoh/transport_tls",
        "zenoh/transport_udp",
        "zenoh/transport_unixpipe",
        "zenoh/transport_unixsock-stream",
        "zenoh/transport_vsock",
        "zenoh/transport_ws",
        "zenoh/unstable",
    ],
    deps = all_crate_deps_opaque_types(build = True, normal = True),
)

# Run the build script to generate the C headers and the Rust module for opaque types.

cargo_build_script(
    name = "build_script",
    srcs = glob([
        "build.rs",
        "buildrs/**",
    ]),
    data = glob([
        "build_resources_opaque_types.txt",
        "build-resources/opaque-types/**",
        "cbindgen.toml",
        "cbindgen-metadata.json",
        "Cargo.toml",
        "include/zenoh.h",
        "include/zenoh_memory.h",
        "include/zenoh_constants.h",
        "splitguide.yaml",
        "version.txt",
        "src/**",
    ]),
    crate_root = "build.rs",
    crate_features = [
        "zenoh-ext/unstable",
        "zenoh/auth_pubkey",
        "zenoh/auth_usrpwd",
        "zenoh/shared-memory",
        "zenoh/transport_compression",
        "zenoh/transport_multilink",
        "zenoh/transport_quic",
        "zenoh/transport_serial",
        "zenoh/transport_tcp",
        "zenoh/transport_tls",
        "zenoh/transport_udp",
        "zenoh/transport_unixpipe",
        "zenoh/transport_unixsock-stream",
        "zenoh/transport_vsock",
        "zenoh/transport_ws",
        "zenoh/unstable",
    ],
    deps = all_crate_deps_crate_zenoh(build = True, normal = False),
    rundir = "."
)

filegroup(
    name = "output_dir",
    output_group = "out_dir",
    srcs = [":build_script"],
)    

# Extract the opaque types Rust module generated by the build script.

genrule(
    name = "extract_opaque_types",
    srcs = [":output_dir"],
    outs = ["src/opaque_types/mod.rs"],
    cmd = "cp $(location :output_dir)/opaque_types.rs $@",
)

rust_library(
    name = "zenohc",
    srcs = glob(["src/**/*.rs"]) + [":extract_opaque_types"],
    deps = all_crate_deps_crate_zenoh(build = False, normal = True),
    proc_macro_deps = all_crate_deps_crate_zenoh(
        proc_macro = True,
    ),
)

# The zenoh-c C API library.

AUTOGENERATED_HEADERS = [
    "include/zenoh_commons.h",
    "include/zenoh_concrete.h",
    "include/zenoh_configure.h",
    "include/zenoh_macros.h",
    "include/zenoh_opaque.h",
]

[
    genrule(
        name = "extract_{}".format(file.replace("/", "_").replace(".", "_")),
        srcs = [":output_dir"],
        outs = [file],
        cmd = "cp $(location :output_dir)/{} $@".format(file),
    )
    for file in AUTOGENERATED_HEADERS
]

cc_library(
    name = "zenoh-c",
    hdrs = AUTOGENERATED_HEADERS + [
        "include/zenoh.h",
        "include/zenoh_constants.h",
        "include/zenoh_memory.h",
    ],
    deps = [":build_script"],
    includes = ["include"],
    local_defines = [
        "ZENOHC_BUILD_WITH_SHARED_MEMORY=TRUE",
        "ZENOHC_BUILD_WITH_UNSTABLE_API=TRUE",
    ],
    copts = ["-Wunused-variable"],
)