#
# Copyright (c) 2022 ZettaScale Technology
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
# which is available at https://www.apache.org/licenses/LICENSE-2.0.
#
# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
#
# Contributors:
#   ZettaScale Zenoh Team, <zenoh@zettascale.tech>
#
name: Release

on:
  release:
    types: [published]
  schedule:
    - cron: "0 1 * * 1-5"
  workflow_dispatch:

jobs:
  checks:
    name: Code checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: rustup component add rustfmt clippy

      - name: Code format check
        run: cargo fmt --check

      - name: Clippy check
        run: cargo clippy --all-targets --all-features -- --deny warnings

      - name: Environment setup
        id: env
        shell: bash
        run: |
          # log some info
          gcc --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V

          echo "GITHUB_REF=${GITHUB_REF}"
          echo "GITHUB_SHA=${GITHUB_SHA:0:8}"
          GIT_BRANCH=`[[ $GITHUB_REF =~ ^refs/heads/.* ]] && echo ${GITHUB_REF/refs\/heads\//} || true`
          echo "GIT_BRANCH=${GIT_BRANCH}"
          echo "GIT_BRANCH=${GIT_BRANCH}" >> $GITHUB_OUTPUT
          GIT_TAG=`[[ $GITHUB_REF =~ ^refs/tags/.* ]] && echo ${GITHUB_REF/refs\/tags\//} || true`
          echo "GIT_TAG=${GIT_TAG}"
          echo "GIT_TAG=${GIT_TAG}" >> $GITHUB_OUTPUT

          ZENOH_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' Cargo.toml | head -n1)
          echo "ZENOH_VERSION=${ZENOH_VERSION}"
          echo "ZENOH_VERSION=${ZENOH_VERSION}" >> $GITHUB_OUTPUT
          if [ -n "${GIT_TAG}" ]; then
            IS_RELEASE="true"
            echo "IS_RELEASE=${IS_RELEASE}"
            echo "IS_RELEASE=${IS_RELEASE}" >> $GITHUB_OUTPUT
            PKG_VERSION=${ZENOH_VERSION}
          elif [ -n "${GIT_BRANCH}" ]; then
            PKG_VERSION=${GIT_BRANCH}-${GITHUB_SHA:0:8}
          else
            PKG_VERSION=${ZENOH_VERSION}-${GITHUB_SHA:0:8}
          fi
          echo "PKG_VERSION=${PKG_VERSION}"
          echo "PKG_VERSION=${PKG_VERSION}" >> $GITHUB_OUTPUT
    outputs:
      GIT_BRANCH: ${{ steps.env.outputs.GIT_BRANCH }}
      GIT_TAG: ${{ steps.env.outputs.GIT_TAG }}
      IS_RELEASE: ${{ steps.env.outputs.IS_RELEASE }}
      ZENOH_VERSION: ${{ steps.env.outputs.ZENOH_VERSION }}
      PKG_VERSION: ${{ steps.env.outputs.PKG_VERSION }}

  builds:
    name: Build for ${{ matrix.job.target }} on ${{ matrix.job.os }}
    needs: checks
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: x86_64-unknown-linux-gnu, arch: amd64, os: ubuntu-20.04, build-cmd: "cargo" }
          - { target: arm-unknown-linux-gnueabi, arch: armel, os: ubuntu-20.04, build-cmd: "cross" }
          - {
              target: arm-unknown-linux-gnueabihf,
              arch: armhf,
              os: ubuntu-20.04,
              build-cmd: "cross",
            }
          - {
              target: armv7-unknown-linux-gnueabihf,
              arch: armhf,
              os: ubuntu-20.04,
              build-cmd: "cross",
            }
          - { target: aarch64-unknown-linux-gnu, arch: arm64, os: ubuntu-20.04, build-cmd: "cross" }
          - { target: x86_64-apple-darwin, arch: darwin, os: macos-latest, build-cmd: "cargo" }
          - { target: aarch64-apple-darwin, arch: darwin, os: macos-latest, build-cmd: "cargo" }
          - { target: x86_64-pc-windows-msvc, arch: win64, os: windows-2019, build-cmd: "cargo" }
          - { target: x86_64-pc-windows-gnu, arch: win64, os: windows-2019, build-cmd: "cargo" }
    env:
      CMAKE_CROSSCOMPILING: ON
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 500 # NOTE: get long history for git-version crate to correctly compute a version
      - name: Fetch Git tags # NOTE: workaround for https://github.com/actions/checkout/issues/290
        shell: bash
        run: git fetch --tags --force
      - name: Install prerequisites
        shell: bash
        run: |
          case ${{ matrix.job.target }} in
            *-linux-gnu*) cargo install cargo-deb ;;
          esac

          case ${{ matrix.job.target }} in
            arm-unknown-linux-gnueabi)
              sudo apt-get -y update
              sudo apt-get -y install gcc-arm-linux-gnueabi
              ;;
            arm*-unknown-linux-gnueabihf)
              sudo apt-get -y update
              sudo apt-get -y install gcc-arm-linux-gnueabihf
              ;;
            aarch64-unknown-linux-gnu)
              sudo apt-get -y update
              sudo apt-get -y install gcc-aarch64-linux-gnu
              ;;
          esac

          cargo install cross --git https://github.com/cross-rs/cross

      - name: Install Rust toolchain
        run: |
          rustup set profile minimal
          rustup target add ${{ matrix.job.target }}

      - name: Build for ${{ matrix.job.target }} target
        run: ${{ matrix.job.build-cmd }} build --release --target=${{ matrix.job.target }} --features=logger-autoinit --features=shared-memory

      - name: Debian package - libzenohc
        if: contains(matrix.job.target, '-linux-gnu')
        run: cargo deb --no-build --no-strip --target=${{ matrix.job.target }} --variant=libzenohc

      - name: Debian package - libzenohc-dev
        if: contains(matrix.job.target, '-linux-gnu')
        run: cargo deb --no-build --no-strip --target=${{ matrix.job.target }} --variant=libzenohc-dev

      - name: Packaging
        id: package
        shell: bash
        run: |
          TARGET=${{ matrix.job.target }}
          LIB_PKG_NAME="${GITHUB_WORKSPACE}/zenoh-c-${{ needs.checks.outputs.PKG_VERSION }}-${TARGET}.zip"
          DEBS_PKG_NAME="${GITHUB_WORKSPACE}/zenoh-c-${{ needs.checks.outputs.PKG_VERSION }}-${TARGET}-deb-pkgs.zip"

          case ${TARGET} in
            *linux*)
              cd "target/${TARGET}/release/"
              echo "Packaging ${LIB_PKG_NAME}:"
              mkdir lib && cp libzenohc.so lib/
              zip -r ${LIB_PKG_NAME} lib
              cd -
              zip -r ${LIB_PKG_NAME} include
              echo "LIB_PKG_NAME=${LIB_PKG_NAME}" >> $GITHUB_OUTPUT

              # check if debian packages has been created and packages them in a single tgz
              if [[ -d target/${TARGET}/debian ]]; then
                cd target/${TARGET}/debian
                echo "Packaging ${DEBS_PKG_NAME}:"
                zip ${DEBS_PKG_NAME} *.deb
                cd -
                echo "DEBS_PKG_NAME=${DEBS_PKG_NAME}" >> $GITHUB_OUTPUT
              fi
              ;;
            *apple*)
              cd "target/${TARGET}/release/"
              echo "Packaging ${LIB_PKG_NAME}:"
              mkdir lib && cp libzenohc.dylib lib/
              zip -r ${LIB_PKG_NAME} lib
              cd -
              zip -r ${LIB_PKG_NAME} include
              echo "LIB_PKG_NAME=${LIB_PKG_NAME}" >> $GITHUB_OUTPUT
              ;;
            *windows*)
              cd "target/${TARGET}/release/"
              echo "Packaging ${LIB_PKG_NAME}:"
              mkdir lib && cp zenohc.dll lib/
              7z -y -r a "${LIB_PKG_NAME}" lib
              cd -
              7z -y -r a "${LIB_PKG_NAME}" include
              echo "LIB_PKG_NAME=${LIB_PKG_NAME}" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: "Upload packages"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.job.target }}
          path: |
            ${{ steps.package.outputs.LIB_PKG_NAME }}
            ${{ steps.package.outputs.DEBS_PKG_NAME }}

  publication:
    name: Publish the release
    if: needs.checks.outputs.IS_RELEASE == 'true'
    needs: [checks, builds]
    runs-on: ubuntu-latest
    steps:
      - name: Download result of previous builds
        uses: actions/download-artifact@v3
        with:
          path: ARTIFACTS
      - name: Publish as github release
        uses: softprops/action-gh-release@v1
        with:
          files: ARTIFACTS/*/*.*
      - name: Publish to download.eclipse.org/zenoh
        env:
          SSH_TARGET: genie.zenoh@projects-storage.eclipse.org
          ECLIPSE_BASE_DIR: /home/data/httpd/download.eclipse.org/zenoh/zenoh-c
        shell: bash
        run: |
          echo "--- setup ssh-agent"
          eval "$(ssh-agent -s)"
          echo 'echo "${{ secrets.SSH_PASSPHRASE }}"' > ~/.ssh_askpass && chmod +x ~/.ssh_askpass
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' | DISPLAY=NONE SSH_ASKPASS=~/.ssh_askpass ssh-add - > /dev/null 2>&1
          rm -f ~/.ssh_askpass
          echo "--- test ssh:"
          ssh -o "StrictHostKeyChecking=no" ${SSH_TARGET} ls -al
          echo "---- list artifacts to upload:"
          ls -R ARTIFACTS || true
          DOWNLOAD_DIR=${ECLIPSE_BASE_DIR}/${{ needs.checks.outputs.ZENOH_VERSION }}
          echo "---- copy artifacts into ${DOWNLOAD_DIR}"
          ssh -o "StrictHostKeyChecking=no" ${SSH_TARGET} mkdir -p ${DOWNLOAD_DIR}
          cd ARTIFACTS
          sha256sum */* > sha256sums.txt
          scp -o "StrictHostKeyChecking=no" -r * ${SSH_TARGET}:${DOWNLOAD_DIR}/
          echo "---- cleanup identity"
          ssh-add -D
