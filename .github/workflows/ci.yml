name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  schedule:
    - cron: "0 6 * * 1-5"

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: rustup component add rustfmt clippy

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- --deny warnings

      - name: Run rustfmt
        run: cargo fmt --check

      - name: Check for feature leaks
        run: cargo test --no-default-features

      - name: Build and install
        shell: bash
        run: |
          mkdir -p build && cd build 
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=~/local
          cmake --build . --target install --config Release

      - name: Run cmake tests with zenoh-c as dynamic library
        shell: bash
        run: |
          cd build
          cmake .. -DZENOHC_LIB_STATIC=FALSE -DCMAKE_BUILD_TYPE=Release
          cmake --build . --target tests --config Release
          ctest -C Release --output-on-failure -E "(unit_z_api_alignment_test|build_z_build_static)"

      - name: Run cmake tests with zenoh-c as static library
        shell: bash
        run: |
          cd build
          cmake .. -DZENOHC_LIB_STATIC=TRUE -DCMAKE_BUILD_TYPE=Release
          cmake --build . --target tests --config Release
          ctest -C Release --output-on-failure -E "(unit_z_api_alignment_test|build_z_build_shared)"

      - name: Build examples with zenoh-c
        shell: bash
        run: |
          cd build
          cmake --build . --target examples

      - name: Build examples with zenoh-c as subbroject and static library and in debug mode
        shell: bash
        run: |
          mkdir -p build_examples_subproj && cd build_examples_subproj
          cmake ../examples -DCMAKE_BUILD_TYPE=Debug -DZENOHC_LIB_STATIC=TRUE
          cmake --build . --config Debug

      - name: Build examples with zenoh-c as installed package
        shell: bash
        run: |
          mkdir -p build_examples_findproj && cd build_examples_findproj
          cmake ../examples -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=~/local -DZENOHC_SOURCE=PACKAGE
          cmake --build . --config Release

      - name: Run rust tests
        run: cargo test --verbose --release --features=logger-autoinit --features=shared-memory

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          # Artifact name
          name: zenoh-c-${{ matrix.os }}
          # Directory containing files to upload
          path: |
            target/release
            !target/release/build
            !target/release/deps
            !target/release/.*
            !target/release/*.d

  # NOTE: In GitHub repository settings, the "Require status checks to pass
  # before merging" branch protection rule ensures that commits are only merged
  # from branches where specific status checks have passed. These checks are
  # specified manually as a list of workflow job names. Thus we use this extra
  # job to signal whether all CI checks have passed.
  ci:
    name: CI status checks
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
      - name: Check whether all jobs pass
        run: echo '${{ toJson(needs) }}' | jq -e 'all(.result == "success")'
